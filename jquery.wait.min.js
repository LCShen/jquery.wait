/**
 * jquery.wait - insert simple delays into your jquery method chains
 *
 * jquery.wait allows you to easily insert a delay into a chain of jquery
 * methods.  This allows you to use timeouts without uglifying your code and
 * without having to use a custom queue.
 *
 * example:
 *     // add a class to element #foo, then remove 5 seconds later
 *
 *     // without jquery.wait
 *      $('#foo').addClass('myClass');
 *      window.setTimeout(function(){
 *        $('#foo').removeClass('myClass');
 *      }, 5000);
 *
 *     // with jquery.wait
 *     $('#foo').addClass('myClass').wait(5000).removeClass('myClass');
 *
 * jquery.wait will work with any default jquery object methods, as well as any
 * methods provided by plugins loaded *before* jquery.wait.
 *
 * !important - if you are using jquery.wait to add/remove classes that controll
 * css transitions, the duration of the wait needs to be slightly longer than
 * the transition time. So, if in the example above the class .myClass added a
 * 5 second transition of some sort, i would need to make the wait time longer.
 * I recommend 100ms longer, though your needs may vary depending on the
 * complexity of the animation.
 *
 * If you are chaining jQuery transitions, it is better to use the default
 * jquery .delay method, which has the same syntax but works with jquery queues
 *
 * @author Matthew Lee matt@wahilacreative.com
 */(function(e){function t(e,t,n){var r=this;this.fncQueue=n?n:[];this.delayCompleted=!1;this.real=e;this.timeoutKey=window.setTimeout(function(){r.performDummyQueueActions.call(r)},t)}t.prototype.addToQueue=function(e,t){!this.delayCompleted||this.fncQueue.length>0?this.fncQueue.unshift({fnc:e,arg:t}):this.real[e].apply(this.real,t);return this};t.prototype.performDummyQueueActions=function(){this.delayCompleted=!0;var e;while(this.fncQueue.length>0){e=this.fncQueue.pop();if(e.fnc==="wait"){e.arg.push(this.fncQueue);this.real[e.fnc].apply(this.real,e.arg);break}this.real[e.fnc].apply(this.real,e.arg)}};e.fn.wait=function(e,n){return new t(this,e,n)};for(var n in e.fn)t.prototype[n]=function(e){return function(){var t=Array.prototype.slice.call(arguments);return this.addToQueue(e,t)}}(n)})(jQuery);